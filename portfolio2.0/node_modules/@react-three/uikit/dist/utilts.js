import { jsx as _jsx } from "react/jsx-runtime";
import { effect, signal } from '@preact/signals-core';
import { forwardRef, useEffect, useMemo, useState } from 'react';
import { useDefaultProperties } from './default.js';
import { addHandler } from '@pmndrs/uikit/internals';
const eventHandlerKeys = [
    'onClick',
    'onContextMenu',
    'onDoubleClick',
    'onPointerCancel',
    'onPointerDown',
    'onPointerEnter',
    'onPointerLeave',
    'onPointerMissed',
    'onPointerMove',
    'onPointerOut',
    'onPointerOver',
    'onPointerUp',
    'onWheel',
];
export const AddHandlers = forwardRef(({ handlers: handlersSignal, allowSkippingChildren, properties, children }, ref) => {
    const [systemHandlers, setSystemHandlers] = useState(() => handlersSignal.peek());
    useEffect(() => effect(() => {
        const handlers = handlersSignal.value;
        const ref = void setTimeout(() => setSystemHandlers(handlers), 0);
        return () => clearTimeout(ref);
    }), [handlersSignal]);
    const handlers = useMemo(() => {
        const result = { ...systemHandlers };
        const keysLength = eventHandlerKeys.length;
        for (let i = 0; i < keysLength; i++) {
            const key = eventHandlerKeys[i];
            addHandler(key, result, properties[key]);
        }
        if (Object.keys(result).length === 0) {
            return undefined;
        }
        return result;
    }, [systemHandlers, properties]);
    if (allowSkippingChildren && handlers == null) {
        return null;
    }
    return (_jsx("object3D", { pointerEvents: properties.pointerEvents, pointerEventsOrder: properties.pointerEventsOrder, pointerEventsType: properties.pointerEventsType, ref: ref, matrixAutoUpdate: false, ...handlers, children: children }));
});
export function usePropertySignals(properties) {
    const propertySignals = useMemo(() => ({
        style: signal(undefined),
        properties: signal(undefined),
        default: signal(undefined),
    }), []);
    propertySignals.properties.value = properties;
    propertySignals.default.value = useDefaultProperties();
    return propertySignals;
}
